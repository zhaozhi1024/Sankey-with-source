# This file is a template, and might need editing before it works on your project.
# Auto DevOps
# This CI/CD configuration provides a standard pipeline for
# * building a Docker image (using a buildpack if necessary),
# * storing the image in the container registry,
# * running tests from a buildpack,
# * running code quality analysis,
# * creating a review app for each topic branch,
# * and continuous deployment to production
#
# Test jobs may be disabled by setting environment variables:
# * test: TEST_DISABLED
# * code_quality: CODE_QUALITY_DISABLED
# * license_management: LICENSE_MANAGEMENT_DISABLED
# * performance: PERFORMANCE_DISABLED
# * sast: SAST_DISABLED
# * dependency_scanning: DEPENDENCY_SCANNING_DISABLED
# * container_scanning: CONTAINER_SCANNING_DISABLED
# * dast: DAST_DISABLED
# * review: REVIEW_DISABLED
# * stop_review: REVIEW_DISABLED
#
# In order to deploy, you must have a Kubernetes cluster configured either
# via a project integration, or via group/project variables.
# AUTO_DEVOPS_DOMAIN must also be set as a variable at the group or project
# level, or manually added below.
#
# Continuous deployment to production is enabled by default.
# If you want to deploy to staging first, or enable incremental rollouts,
# set STAGING_ENABLED or INCREMENTAL_ROLLOUT_ENABLED environment variables.
# If you want to use canary deployments, set CANARY_ENABLED environment variable.
#
# If Auto DevOps fails to detect the proper buildpack, or if you want to
# specify a custom buildpack, set a project variable `BUILDPACK_URL` to the
# repository URL of the buildpack.
# e.g. BUILDPACK_URL=https://github.com/heroku/heroku-buildpack-ruby.git#v142
# If you need multiple buildpacks, add a file to your project called
# `.buildpacks` that contains the URLs, one on each line, in order.
# Note: Auto CI does not work with multiple buildpacks yet

image: docker-mirror.sh.synyi.com/node:8.11.3-alpine


variables:
  # AUTO_DEVOPS_DOMAIN is the application deployment domain and should be set as a variable at the group or project level.
  AUTO_DEVOPS_DOMAIN: sy

  POSTGRES_USER: user
  POSTGRES_PASSWORD: testing-password
  POSTGRES_ENABLED: "false"
  CODE_QUALITY_DISABLED: "yes"
  DAST_DISABLED: "yes"
  DEPENDENCY_SCANNING_DISABLED: "yes"
  CONTAINER_SCANNING_DISABLED: "yes"
  LICENSE_MANAGEMENT_DISABLED: "yes"
  PERFORMANCE_DISABLED: "yes"
  SAST_DISABLED: "yes"
  TEST_DISABLED: "yes"
  PACKAGE_DISABLED: "yes"
  PACKAGE_TRIGGER_BRANCH: "master"
  POSTGRES_DB: $CI_ENVIRONMENT_SLUG

  KUBERNETES_VERSION: 1.8.6
  HELM_VERSION: 2.6.1


stages:
  - build

before_script:
  # Install ssh-agent if not already installed, it is required by Docker.
  # (change apt-get to yum if you use a CentOS-based image)
  - 'which ssh-agent || ( apk update && apk add openssh-client )'

  # Run ssh-agent (inside the build environment)
  - eval $(ssh-agent -s)

  # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  # error: https://gitlab.com/gitlab-examples/ssh-private-key/issues/1
  # - echo "$SSH_PRIVATE_KEY_DEV"
  - echo "$SSH_PRIVATE_KEY_DEV" | tr -d '\r' | ssh-add - > /dev/null

  # For Docker builds disable host key checking. Be aware that by adding that
  # you are suspectible to man-in-the-middle attacks.
  # WARNING: Use this only with the Docker executor, if you use it with shell
  # you will overwrite your user's SSH config.
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

build-app:
  stage: build
  script:
  - echo "http://mirrors.aliyun.com/alpine/v3.8/main/" > /etc/apk/repositories && apk update && apk add -U gettext jq
  - '[ "$CI_COMMIT_REF_SLUG" = master ] && DEV_V= || DEV_V=.dev0'
  - export BUILD="$CI_JOB_ID$DEV_V"
  - export CURRENT_VER=$(jq -r '.version' package.json)
  - export CURRENT_MAIN_VER="${CURRENT_VER%?}"
  - export NEW_VER="$CURRENT_MAIN_VER$BUILD"
  - export TEMPLATE=$(jq '.version="${NEW_VER}"' package.json)
  - echo $TEMPLATE | envsubst > package.json
  - cat package.json
  - npm config set registry https://npm-mirror.sh.synyi.com/
  - npm config set unsafe-perm true
  - npm install --save-dev -ddd
  - npm run test || true
  - npm run build -ddd
  - rm ~/.npmrc || true
  - rm .npmrc || true
  - npm config set registry https://npm.sh.synyi.com/
  - npm run ci-publish || true
  only:
  - branches
